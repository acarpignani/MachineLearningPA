model <- train(classe ~ . , data = training,
method = "rf", trControl = crossVal)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
head(prediction)
table(prediction)
# Modelling with cross validation
set.seed(12121)
crossVal <- trainControl(method = "cv", number = 4,
allowParallel = TRUE, verboseIter = TRUE)
model <- train(classe ~ . , data = training,
method = "rf", trControl = crossVal)
View(testing)
View(testing)
View(testing)
View(testing)
testing <- testing[,complete.cases(t(training))]
# Setting working directory
setwd("~/Desktop/Coursera/Practical Machine Learning/Peer Assessment/")
library(dplyr)
library(ggplot2)
library(caret)
library(randomForest)
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
rm(trainUrl, testUrl)
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
dim(training)
dim(testing)
table(training$classe)
# Checking for missing values
nrow(training[!complete.cases(training),])
# All rows have NAs, but let's see how many variables have NAs
ncols(training[,!complete.cases(t(training))])
# All rows have NAs, but let's see how many variables have NAs
ncol(training[,!complete.cases(t(training))])
# Eliminating variables with missing values
training <- training[,complete.cases(t(training))]
testing <- testing[,complete.cases(t(training))]
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Eliminating variables with missing values
testing <- testing[,complete.cases(t(training))]
training <- training[,complete.cases(t(training))]
useless_cols <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
rm(useless_cols)
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
validation <- training[-inTrain,]
training <- training[inTrain,]
# Modelling with cross validation
set.seed(12121)
crossVal <- trainControl(method = "cv", number = 4,
allowParallel = TRUE, verboseIter = TRUE)
model <- train(classe ~ . , data = training,
method = "rf", trControl = crossVal)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
model <- train(classe ~ . , data = training,
method = "glmboost", trControl = crossVal)
model <- train(classe ~ . , data = training,
method = "glmboost", trControl = crossVal)
rm(model)
model <- train(classe ~ . , data = training,
method = "glmboost", trControl = crossVal)
model <- train(classe ~ . , data = training,
method = "rpart", trControl = crossVal)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
hist(training$classe)
histogram(training$classe)
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
hist(training$classe)
barchart(training$classe)
barchart(training$classe, xlab = "Frequency", ylab = "Classe", colour = "blue")
barchart(training$classe, xlab = "Frequency", ylab = "Classe", fill = "blue")
barchart(training$classe, xlab = "Frequency", ylab = "Classe", col = "blue")
# Modelling with cross validation
crossVal <- trainControl(method = "cv", number = 4, verboseIter = TRUE)
model <- train(classe ~ . , data = training,
method = "rf", trControl = crossVal)
# Setting working directory
setwd("~/Desktop/Coursera/Practical Machine Learning/Peer Assessment/")
# Loading packages
library(dplyr)
library(ggplot2)
library(caret)
# Files url:
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Downloading files
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
rm(trainUrl, testUrl)
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Data Exploration
dim(training)
dim(testing)
table(training$classe)
barchart(training$classe, xlab = "Frequency", ylab = "Classe", col = "blue")
# Checking for missing values
nrow(training[!complete.cases(training),])
# All rows have NAs, but let's see how many variables have NAs
ncol(training[,!complete.cases(t(training))])
# Eliminating variables with missing values
testing <- testing[,complete.cases(t(training))]
training <- training[,complete.cases(t(training))]
# Remove unnecessary columns from testing and training
useless_cols <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
rm(useless_cols)
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
# PreProcessing data
set.seed(12121)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
validation <- training[-inTrain,]
training <- training[inTrain,]
# Modelling with cross validation
crossVal <- trainControl(method = "cv", number = 4, verboseIter = TRUE)
model <- train(classe ~ . , data = training,
method = "rf", trControl = crossVal)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
testing[,-ncol(testing)]
testing <- testing[,-ncol(testing)]
testing <- testing[-ncol(testing),]
# Eliminating variables with missing values
testing <- testing[,complete.cases(t(training))]
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Downloading files
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Eliminating variables with missing values
testing <- testing[,complete.cases(t(training))]
training <- training[,complete.cases(t(training))]
useless_cols <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
testing <- testing[-ncol(testing),]
rm(useless_cols)
testing <- testing[-ncol(testing),]
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
set.seed(12121)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
validation <- training[-inTrain,]
training <- training[inTrain,]
crossVal <- trainControl(method = "cv", number = 4, verboseIter = TRUE)
model <- train(classe ~ . , data = training,
method = "rf", trControl = crossVal)
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
predictions <- predict(model,newdata = testing[-1,])
print(predictions)
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Downloading files
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
rm(trainUrl, testUrl)
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
dim(training)
dim(testing)
# Checking for missing values
nrow(training[!complete.cases(training),])
# All rows have NAs, but let's see how many variables have NAs
ncol(training[,!complete.cases(t(training))])
# Eliminating variables with missing values
NA_list <- complete.cases(t(training))
# Eliminating variables with missing values
NA_list <- !complete.cases(t(training))
training <- training[,!NA_list]
testing <- testing[,!NA_list]
rm(NA_list)
# Remove unnecessary columns from testing and training
useless_cols <- c("user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
rm(useless_cols)
# Removing extra column "id_problem" from testing
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
# PreProcessing data
set.seed(12121)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
validation <- training[-inTrain,]
training <- training[inTrain,]
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
NA_list <- !complete.cases(t(training))
training <- training[,!NA_list]
testing <- testing[,!NA_list]
rm(NA_list)
useless_cols <- c("user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
rm(useless_cols)
# Removing extra column "id_problem" from testing
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
realTrain <- training[inTrain,]
# Modelling with cross validation
crossVal <- trainControl(method = "cv", number = 4)
model <- train(classe ~ . , data = realTrain,
method = "rf", trControl = crossVal)
print(model)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
model <- train(classe ~ . , data = realTrain,
method = "rpart", trControl = crossVal)
print(model)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
model <- train(classe ~ . , data = realTrain,
method = "rpart", trControl = crossVal, tuneLength = 5)
print(model)
# Validation
val_predict <- predict(model, newdata = validation)
confusionMatrix(validation$classe, val_predict)
# Setting working directory
setwd("~/Desktop/Coursera/Practical Machine Learning/Peer Assessment/")
# Loading packages
library(ggplot2)
library(caret)
# Files url:
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Downloading files
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
rm(trainUrl, testUrl)
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Data Exploration
dim(training)
dim(testing)
table(training$classe)
barchart(training$classe, xlab = "Frequency", ylab = "Classe", col = "blue")
# Checking for missing values
nrow(training[!complete.cases(training),])
# All rows have NAs, but let's see how many variables have NAs
ncol(training[,!complete.cases(t(training))])
# Eliminating variables with missing values
NA_list <- !complete.cases(t(training))
training <- training[,!NA_list]
testing <- testing[,!NA_list]
rm(NA_list)
# Remove unnecessary columns from testing and training
useless_cols <- c("user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
rm(useless_cols)
# Removing extra column "id_problem" from testing
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
# PreProcessing data
set.seed(12121)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
train <- training[inTrain,]
valid <- training[-inTrain,]
# Modelling with cross validation
control <- trainControl(method = "cv", number = 4)
model <- train(classe ~ . , data = train,
method = "rpart", trControl = control, tuneLength = 5)
print(model)
# Validation
val_predict <- predict(model, newdata = valid)
confusionMatrix(validation$classe, val_predict)
# Validation
val_predict <- predict(model, newdata = valid)
confusionMatrix(valid$classe, val_predict)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
# Setting working directory
setwd("~/Desktop/Coursera/Practical Machine Learning/Peer Assessment/")
# Loading packages
library(ggplot2)
library(caret)
# Files url:
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Downloading files
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
rm(trainUrl, testUrl)
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Data Exploration
dim(training)
dim(testing)
table(training$classe)
barchart(training$classe, xlab = "Frequency", ylab = "Classe", col = "blue")
# Checking for missing values
nrow(training[!complete.cases(training),])
# All rows have NAs, but let's see how many variables have NAs
ncol(training[,!complete.cases(t(training))])
# Eliminating variables with missing values
NA_list <- !complete.cases(t(training))
training <- training[,!NA_list]
testing <- testing[,!NA_list]
rm(NA_list)
# Remove unnecessary columns from testing and training
useless_cols <- c("user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"num_window")
training <- training[,!(names(training) %in% useless_cols)]
testing <- testing[,!(names(testing) %in% useless_cols)]
rm(useless_cols)
# Removing extra column "id_problem" from testing
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
# training$classe <- factor(training$classe)
# PreProcessing data
set.seed(12121)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
train <- training[inTrain,]
valid <- training[-inTrain,]
# Modelling with cross validation
control <- trainControl(method = "cv", number = 4)
model <- train(classe ~ . , data = train,
method = "rpart", trControl = control, tuneLength = 5)
print(model)
# Validation
val_predict <- predict(model, newdata = valid)
confusionMatrix(valid$classe, val_predict)
confusionMatrix(valid$classe, factor(val_predict))
confusionMatrix(asfactor(valid$classe), val_predict)
confusionMatrix(as.factor(valid$classe), val_predict)
raining <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
str(training)
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
str(training)
# Remove unnecessary columns from testing and training
training <- training[,-1:7]
testing <- testing[,-1:7]
# Remove unnecessary columns from testing and training
training <- training[,-(1:7)]
testing <- testing[,-(1:7)]
str(training)
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
NA_list <- !complete.cases(t(training))
training <- training[,!NA_list]
testing <- testing[,!NA_list]
rm(NA_list)
training <- training[,-(1:7)]
testing <- testing[,-(1:7)]
# Removing extra column "id_problem" from testing
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
str(training)
str(testing)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
train <- training[inTrain,]
valid <- training[-inTrain,]
control <- trainControl(method = "cv", number = 4)
model <- train(classe ~ . , data = train,
method = "rpart", trControl = control, tuneLength = 5)
print(model)
# Validation
test_prediction <- predict(model, newdata = valid)
table(test_prediction)
table(valid$classe)
confusionMatrix(valid$classe, test_prediction)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
# Setting working directory
setwd("~/Desktop/Coursera/Practical Machine Learning/Peer Assessment/")
# Loading packages
library(ggplot2)
library(caret)
# Files url:
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Downloading files
download.file(trainUrl, destfile = "./pml-training.csv", method = "curl")
download.file(testUrl, destfile = "./pml-testing.csv", method = "curl")
rm(trainUrl, testUrl)
# Uploading files into R
training <- read.csv("./pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv("./pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
# Data Exploration
dim(training)
dim(testing)
table(training$classe)
barchart(training$classe, xlab = "Frequency", ylab = "Classe", col = "blue")
# Checking for missing values
nrow(training[!complete.cases(training),])
# All rows have NAs, but let's see how many variables have NAs
ncol(training[,!complete.cases(t(training))])
# Eliminating variables with missing values
NA_list <- !complete.cases(t(training))
training <- training[,!NA_list]
testing <- testing[,!NA_list]
rm(NA_list)
# Remove unnecessary columns from testing and training
training <- training[,-(1:7)]
testing <- testing[,-(1:7)]
# Removing extra column "id_problem" from testing
testing <- testing[,-ncol(testing)]
# Transforming the variable classe into factor
training$classe <- factor(training$classe)
# PreProcessing data
set.seed(12121)
inTrain <- createDataPartition(y = training$classe, p = 0.60, list = FALSE)
train <- training[inTrain,]
valid <- training[-inTrain,]
# Modelling with cross validation
control <- trainControl(method = "cv", number = 4)
model <- train(classe ~ . , data = train,
method = "rpart", trControl = control, tuneLength = 5)
print(model)
# Validation
test_prediction <- predict(model, newdata = valid)
table(test_prediction)
table(valid$classe)
confusionMatrix(valid$classe, test_prediction)
# Testing the model
prediction <- predict(model, newdata = testing)
print(prediction)
# Table of predictions
table(prediction)
rfmod <- train(classe ~ . , data = train,
method = "rf", trControl = control)
# Random forest prediction
test_rf <- predict(rfmod, newdata = valid)
table(test_rf)
table(valid$classe)
